#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [FLEET_URL] [FLEET_USERNAME] [FLEET_PASSWORD]"
    echo
    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
    echo "  FLEET_URL      - URL Fleet Management (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://fleet-management-prod-011.grafana.net)"
    echo "  FLEET_USERNAME - Username –¥–ª—è Fleet Management"
    echo "  FLEET_PASSWORD - Password –¥–ª—è Fleet Management"
    echo
    echo "–ü—Ä–∏–º–µ—Ä:"
    echo "  $0 https://fleet-management-prod-011.grafana.net 1300043 glc_xxx"
    echo
    echo "–ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    echo "  GRAFANA_FLEET_URL, GRAFANA_FLEET_USERNAME, GRAFANA_FLEET_PASSWORD"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å Docker service."
        exit 1
    fi
    
    log_success "Docker –Ω–∞–π–¥–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_env_vars() {
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    FLEET_URL="${1:-$GRAFANA_FLEET_URL}"
    FLEET_USERNAME="${2:-$GRAFANA_FLEET_USERNAME}"
    FLEET_PASSWORD="${3:-$GRAFANA_FLEET_PASSWORD}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if [ -z "$FLEET_URL" ] || [ -z "$FLEET_USERNAME" ] || [ -z "$FLEET_PASSWORD" ]; then
        log_error "–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã!"
        echo
        show_help
        exit 1
    fi
    
    log_info "Fleet URL: $FLEET_URL"
    log_info "Fleet Username: $FLEET_USERNAME"
    log_info "Fleet Password: [–°–ö–†–´–¢]"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ Alloy
download_config() {
    local config_url=""
    local github_repo="https://raw.githubusercontent.com/Beniamiiin/vpnnode/refs/heads/master/grafana-alloy"
    
    # –ï—Å–ª–∏ –º—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–æ–º
    if [ -f "local/local.alloy" ]; then
        log_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ local/local.alloy"
        cp local/local.alloy /tmp/alloy_config.tmp
        log_success "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω"
        return 0
    fi
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ URL –∫–æ–Ω—Ñ–∏–≥–∞
    if [ ! -z "$4" ]; then
        config_url="$4"
    else
        config_url="${github_repo}/local/local.alloy?$(date +%s)"
    fi
    
    log_info "–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑: $config_url"
    
    if command -v curl &> /dev/null; then
        curl -fsSL -H 'Cache-Control: no-cache' -H 'Pragma: no-cache' "$config_url" -o /tmp/alloy_config.tmp
    elif command -v wget &> /dev/null; then
        wget -q "$config_url" -O /tmp/alloy_config.tmp
    else
        log_error "–ù–µ –Ω–∞–π–¥–µ–Ω curl –∏–ª–∏ wget –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞"
        exit 1
    fi
    
    if [ ! -s "/tmp/alloy_config.tmp" ]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π"
        exit 1
    fi
    
    log_success "–ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –∫–æ–Ω—Ñ–∏–≥–∞
setup_config() {
    log_info "–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
    mkdir -p /etc/alloy
    mkdir -p /var/lib/alloy/data
    
    log_info "–ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ /etc/alloy/config.alloy..."
    cp /tmp/alloy_config.tmp /etc/alloy/config.alloy
    chmod 644 /etc/alloy/config.alloy
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    rm -f /tmp/alloy_config.tmp
    
    log_success "–ö–æ–Ω—Ñ–∏–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
stop_old_container() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ grafana-alloy..."
    
    if docker ps -a --format "{{.Names}}" | grep -q "^grafana-alloy$"; then
        log_warning "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
        docker rm grafana-alloy -f 2>/dev/null || true
        log_success "–°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–¥–∞–ª–µ–Ω"
    else
        log_info "–°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
start_container() {
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä grafana-alloy..."
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    local hostname_var=$(hostname)
    local server_ip=$(hostname -I | awk '{print $1}')
    
    log_info "Hostname: $hostname_var"
    log_info "Server IP: $server_ip"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–µ–¥–∞–º–∏
    docker run \
        -d \
        --network=host \
        --name grafana-alloy \
        -e HOSTNAME="$hostname_var" \
        -e SERVER_IP="$server_ip" \
        -e GRAFANA_FLEET_URL="$FLEET_URL" \
        -e GRAFANA_FLEET_USERNAME="$FLEET_USERNAME" \
        -e GRAFANA_FLEET_PASSWORD="$FLEET_PASSWORD" \
        -v /etc/alloy/config.alloy:/etc/alloy/config.alloy \
        -v /var/lib/alloy/data:/var/lib/alloy/data \
        -p 12345:12345 \
        grafana/alloy:latest \
        run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data \
        /etc/alloy/config.alloy
    
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä grafana-alloy –∑–∞–ø—É—â–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    sleep 2
    
    if docker ps --format "{{.Names}}" | grep -q "^grafana-alloy$"; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ"
        local server_ip=$(hostname -I | awk '{print $1}')
        log_info "Alloy –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://$server_ip:12345"
    else
        log_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
        docker logs grafana-alloy
        exit 1
    fi
}

# –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
show_logs() {
    log_info "–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
    echo "----------------------------------------"
    docker logs grafana-alloy -f
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        show_help
        exit 0
    fi
    
    echo "========================================="
    echo "    Grafana Alloy Deployment Script     "
    echo "========================================="
    echo
    
    check_root
    check_docker
    setup_env_vars "$1" "$2" "$3"
    download_config "$1" "$2" "$3" "$4"
    setup_config
    stop_old_container
    start_container
    check_container_status
    
    echo
    log_success "üéâ Grafana Alloy —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
    echo
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ª–æ–≥–∏
    read -p "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏? [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        show_logs
    else
        log_info "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker logs grafana-alloy -f"
    fi
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 